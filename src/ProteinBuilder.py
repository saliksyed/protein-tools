from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from operator import itemgetter


RESIDUE_GEOMETRY = {'CYS': {'C': [1.986, 1.419, 0.0], 'H2': [-0.397, -1.101, 0.0], 'CB': [2.111, -0.807, -1.21], 'CA': [1.558, -0.029, 0.0], 'H1': [-0.54, 0.725, 0.0], 'OC': [3.396, 1.655, 0.0], 'O': [1.165, 2.348, 0.0], 'N': [0.102, -0.143, 0.0], 'HO': [1.665, 3.249, 0.0], 'HA': [1.942, -0.485, 0.931], 'SG': [3.916, -0.856, -1.168], 'HG': [4.123, 0.036, -2.134], 'HB3': [1.778, -0.357, -2.168], 'HB2': [1.743, -1.849, -1.218]}, 'ASP': {'OC': [5.071, 2.132, 1.301], 'C': [3.741, 1.883, 1.36], 'H2': [1.676, -0.57, 0.579], 'CB': [3.874, -0.376, 0.102], 'CA': [3.329, 0.368, 1.336], 'H1': [1.317, 0.849, 1.478], 'CG': [5.416, -0.548, 0.031], 'O': [2.967, 2.808, 1.452], 'N': [1.884, 0.02, 1.372], 'OD1': [6.04, -0.341, 1.075], 'HC': [5.528, 1.272, 1.164], 'HA': [3.782, -0.083, 2.241], 'OD2': [5.837, -0.887, -1.076], 'HB3': [3.523, 0.08, -0.838], 'HB2': [3.48, -1.409, 0.092]}, 'SER': {'C': [2.009, 1.402, 0.0], 'HOC': [3.88, 0.636, 0.0], 'OG': [1.824, -0.207, -2.457], 'CB': [2.073, -0.829, -1.192], 'CA': [1.502, -0.02, 0.0], 'H1': [-0.552, 0.845, 0.0], 'OC': [3.43, 1.562, 0.0], 'O': [1.244, 2.367, 0.0], 'N': [0.043, -0.056, 0.0], 'H2': [-0.507, -0.986, 0.0], 'HA': [1.854, -0.486, 0.939], 'HG': [0.871, -0.178, -2.58], 'HB3': [1.675, -1.862, -1.203], 'HB2': [3.168, -0.947, -1.072]}, 'GLN': {'HG1': [4.057, 0.244, -1.395], 'HG2': [4.122, -1.249, -0.491], 'C': [1.965, 1.419, 0.0], 'HA': [1.939, -0.495, 0.923], 'H2': [-0.35, -1.007, 0.0], 'CB': [2.103, -0.769, -1.236], 'CA': [1.544, -0.031, 0.0], 'H1': [-0.486, 0.615, 0.0], 'CG': [3.661, -0.788, -1.384], 'O': [1.146, 2.335, 0.0], 'N': [0.089, -0.153, 0.0], 'OC': [3.374, 1.662, 0.0], 'HO': [1.641, 3.238, 0.0], 'HE22': [4.011, -2.365, -4.342], 'HE21': [2.517, -1.911, -3.354], 'CD': [4.286, -1.45, -2.618], 'NE2': [3.519, -2.005, -3.522], 'OE1': [5.495, -1.45, -2.789], 'HB3': [1.66, -0.318, -2.148], 'HB2': [1.739, -1.816, -1.223]}, 'LYS': {'HC': [5.014, 1.543, 1.344], 'HA': [3.058, 0.298, 2.281], 'HE1': [7.278, 0.659, -1.038], 'HE2': [7.429, -0.866, -0.163], 'HG2': [5.244, -0.432, 1.015], 'HG1': [5.205, 1.078, 0.11], 'NZ': [7.63, -1.052, -2.31], 'HZ1': [8.656, -0.987, -2.337], 'HZ3': [7.296, -0.627, -3.186], 'HZ2': [7.406, -2.053, -2.389], 'C': [3.101, 2.198, 1.344], 'CB': [3.295, 0.003, 0.122], 'CA': [2.68, 0.748, 1.344], 'CG': [4.851, 0.029, 0.085], 'O': [2.282, 3.114, 1.344], 'N': [1.225, 0.626, 1.344], 'CE': [7.019, -0.426, -1.103], 'CD': [5.489, -0.61, -1.156], 'HD3': [5.062, -0.135, -2.065], 'HD2': [5.199, -1.68, -1.207], 'H2': [0.731, -0.335, 1.344], 'H1': [0.578, 1.491, 1.344], 'OC': [4.51, 2.441, 1.344], 'HB3': [2.939, -1.046, 0.119], 'HB2': [2.881, 0.441, -0.811]}, 'ILE': {'CG1': [1.85, -2.319, -1.31], 'CD1': [2.223, -3.02, -2.633], 'HB': [1.887, -0.321, -2.135], 'HA': [1.954, -0.455, 0.946], 'HG11': [2.259, -2.884, -0.45], 'HG12': [0.752, -2.423, -1.212], 'C': [1.928, 1.43, 0.0], 'CB': [2.242, -0.81, -1.203], 'CA': [1.565, -0.036, 0.0], 'O': [1.065, 2.32, 0.0], 'N': [0.116, -0.216, 0.0], 'HD13': [3.315, -3.077, -2.788], 'HD12': [1.791, -2.499, -3.509], 'HD11': [1.846, -4.059, -2.655], 'CG2': [3.799, -0.715, -1.185], 'H2': [-0.565, 0.622, 0.0], 'H1': [-0.339, -1.196, 0.0], 'OC': [3.326, 1.729, 0.0], 'HG21': [4.261, -1.209, -2.058], 'HG23': [4.234, -1.182, -0.281], 'HG22': [4.172, 0.324, -1.229], 'HO': [1.523, 3.243, 0.0]}, 'PRO': {'HG2': [0.486, -2.117, -1.646], 'C': [2.255, 1.528, -1.005], 'HA': [2.112, 0.666, 0.914], 'HD3': [-0.884, -1.18, 0.098], 'HD2': [-1.314, -0.03, -1.279], 'CB': [1.85, -0.869, -0.593], 'CA': [1.622, 0.53, -0.039], 'OC': [3.661, 1.514, -1.266], 'CG': [0.598, -1.039, -1.47], 'O': [1.502, 2.364, -1.565], 'N': [0.112, 0.684, 0.124], 'HG1': [0.561, -0.362, -2.339], 'H': [-0.375, 1.423, 0.652], 'HOC': [3.989, 2.475, -1.435], 'CD': [-0.523, -0.429, -0.622], 'HB3': [1.818, -1.595, 0.229], 'HB2': [2.736, -0.861, -1.25]}, 'THR': {'OC': [3.452, 1.567, 0.0], 'C': [2.032, 1.394, 0.0], 'HA': [1.904, -0.508, 0.929], 'HG22': [4.083, 0.168, -1.502], 'H2': [-0.461, -1.018, 0.0], 'CB': [2.116, -0.818, -1.226], 'CA': [1.539, -0.033, 0.0], 'H1': [-0.523, 0.813, 0.0], 'OG1': [1.743, -2.188, -1.162], 'O': [1.268, 2.339, 0.0], 'N': [0.08, -0.083, 0.0], 'HG21': [3.986, -1.433, -2.235], 'HG1': [2.066, -2.592, -1.973], 'HB': [1.691, -0.378, -2.154], 'HC': [3.911, 0.645, 0.0], 'HG23': [4.138, -1.279, -0.467], 'CG2': [3.654, -0.842, -1.361]}, 'PHE': {'HZ': [1.02, -5.98, -1.718], 'CD1': [0.738, -2.629, -2.117], 'CD2': [2.733, -3.178, -0.87], 'HA': [1.973, -0.5, 0.917], 'HE1': [-0.483, -4.285, -2.715], 'HE2': [3.075, -5.269, -0.531], 'C': [1.943, 1.423, 0.0], 'HOC': [3.873, 0.82, 0.0], 'CB': [2.175, -0.719, -1.261], 'CA': [1.561, -0.038, 0.0], 'CG': [1.89, -2.218, -1.436], 'O': [1.076, 2.341, 0.0], 'N': [0.11, -0.2, 0.0], 'CZ': [1.268, -4.932, -1.646], 'CE2': [2.424, -4.531, -0.977], 'CE1': [0.424, -3.98, -2.214], 'HD2': [3.619, -2.873, -0.331], 'HD1': [0.061, -1.894, -2.533], 'H2': [-0.358, -1.173, 0.0], 'H1': [-0.561, 0.647, 0.0], 'OC': [3.345, 1.704, 0.0], 'HB3': [3.272, -0.569, -1.262], 'HB2': [1.84, -0.182, -2.173]}, 'ALA': {'C': [2.055, 1.361, 0.0], 'HOC': [3.898, 0.528, 0.0], 'H2': [-0.543, -0.938, 0.0], 'CB': [1.956, -0.866, -1.217], 'CA': [1.499, -0.043, 0.0], 'H1': [-0.524, 0.894, 0.0], 'OC': [3.481, 1.47, 0.0], 'O': [1.321, 2.356, 0.011], 'N': [0.039, -0.028, 0.0], 'HA': [1.847, -0.534, 0.928], 'HB3': [1.61, -0.425, -2.172], 'HB2': [3.058, -0.939, -1.274]}, 'GLY': {'C': [1.985, 1.432, 0.0], 'HOC': [3.919, 0.841, 0.0], 'H2': [-0.513, 0.641, 0.0], 'CA': [1.612, -0.031, 0.0], 'H1': [-0.299, -1.179, 0.0], 'OC': [3.385, 1.722, 0.0], 'O': [1.137, 2.319, 0.0], 'N': [0.162, -0.202, 0.0], 'HA1': [2.055, -0.519, 0.888], 'HA2': [2.055, -0.519, -0.888]}, 'HIS': {'OC': [3.396, 1.655, 0.0], 'C': [1.986, 1.419, 0.0], 'CE1': [4.118, -3.363, -0.046], 'HE2': [4.837, -4.388, -1.81], 'H2': [-0.397, -1.101, 0.0], 'CB': [2.047, -0.732, -1.277], 'CA': [1.558, -0.029, 0.0], 'H1': [-0.54, 0.725, 0.0], 'CG': [2.952, -1.892, -0.978], 'O': [1.165, 2.348, 0.0], 'N': [0.102, -0.143, 0.0], 'HD2': [3.362, -2.53, -3.037], 'CD2': [3.517, -2.678, -1.972], 'HC': [3.896, 0.754, 0.0], 'ND1': [3.335, -2.32, 0.291], 'HE1': [4.579, -3.923, 0.758], 'HA': [1.928, -0.468, 0.941], 'NE2': [4.282, -3.641, -1.368], 'HB3': [2.598, -0.031, -1.935], 'HB2': [1.206, -1.113, -1.893]}, 'GLU': {'HG1': [0.695, -0.122, -2.732], 'HG2': [2.138, 0.859, -2.754], 'C': [1.938, 1.443, 0.0], 'HA': [2.01, -0.472, 0.922], 'HE1': [2.198, 0.411, -5.146], 'H2': [-0.298, -1.208, 0.0], 'CB': [2.187, -0.746, -1.242], 'CA': [1.592, -0.027, 0.0], 'H1': [-0.545, 0.607, 0.0], 'CG': [1.796, -0.188, -2.651], 'O': [1.076, 2.313, 0.0], 'N': [0.145, -0.223, 0.0], 'OC': [3.333, 1.759, 0.0], 'HO': [1.524, 3.241, 0.0], 'OE2': [3.063, -2.02, -3.607], 'CD': [2.286, -0.938, -3.892], 'OE1': [2.004, -0.594, -5.032], 'HB3': [1.916, -1.819, -1.194], 'HB2': [3.291, -0.743, -1.16]}, 'LEU': {'HD22': [3.593, -2.971, -0.147], 'HD23': [2.124, -2.798, 0.84], 'HD21': [2.299, -4.19, -0.24], 'CD1': [2.309, -2.864, -2.637], 'CD2': [2.495, -3.105, -0.155], 'HA': [1.746, -0.532, 0.927], 'HG': [0.727, -2.471, -1.231], 'HO': [2.252, 3.08, -0.717], 'C': [2.086, 1.419, 0.155], 'CB': [2.109, -0.786, -1.201], 'CA': [1.487, -0.003, -0.009], 'CG': [1.822, -2.31, -1.288], 'O': [1.839, 2.238, -0.909], 'N': [0.002, 0.019, -0.128], 'HD13': [3.401, -2.742, -2.769], 'HD12': [1.819, -2.357, -3.488], 'HD11': [2.087, -3.943, -2.742], 'H2': [-0.437, 0.724, -0.733], 'H1': [-0.548, -0.738, 0.295], 'OC': [2.73, 1.779, 1.136], 'HB3': [3.208, -0.645, -1.192], 'HB2': [1.784, -0.298, -2.142]}, 'ARG': {'HC': [4.448, 3.496, 0.676], 'HA': [2.575, 2.864, 2.134], 'HE': [6.806, 0.094, 1.761], 'HG2': [4.604, 1.231, 2.416], 'NE': [6.267, -0.77, 1.642], 'HG1': [4.812, 1.292, 0.662], 'HH22': [8.837, -2.612, 1.868], 'HH21': [8.649, -0.803, 1.949], 'C': [2.6, 3.01, 0.014], 'CB': [2.76, 0.838, 1.308], 'CA': [2.189, 2.285, 1.274], 'CG': [4.302, 0.731, 1.473], 'O': [1.774, 3.463, -0.774], 'N': [0.735, 2.219, 1.389], 'CZ': [7.007, -1.874, 1.673], 'NH1': [6.518, -3.074, 1.538], 'NH2': [8.285, -1.752, 1.846], 'CD': [4.786, -0.729, 1.46], 'HD3': [4.49, -1.205, 0.499], 'HD2': [4.269, -1.296, 2.264], 'H2': [0.273, 1.763, 2.183], 'H1': [0.115, 2.627, 0.682], 'OC': [4.007, 3.16, -0.192], 'HH12': [5.505, -3.1, 1.403], 'HH11': [7.154, -3.872, 1.573], 'HB3': [2.438, 0.307, 0.388], 'HB2': [2.277, 0.276, 2.132]}, 'TRP': {'HH2': [4.344, 1.813, 1.318], 'CZ2': [2.81, 2.583, 0.03], 'CZ3': [4.536, 3.942, 1.09], 'CD1': [1.148, 5.266, -1.686], 'CD2': [2.906, 5.002, -0.346], 'HA': [2.238, 7.771, 1.117], 'HE1': [0.538, 3.156, -1.716], 'HE3': [4.503, 6.062, 0.698], 'CH2': [3.933, 2.698, 0.855], 'HZ3': [5.401, 4.002, 1.734], 'HZ2': [2.344, 1.625, -0.142], 'C': [2.272, 9.666, 0.157], 'HOC': [4.18, 8.997, 0.194], 'CB': [2.403, 7.475, -1.054], 'CA': [1.839, 8.22, 0.188], 'CG': [2.195, 5.957, -1.041], 'O': [1.459, 10.589, 0.137], 'N': [0.383, 8.109, 0.19], 'CE3': [4.037, 5.106, 0.505], 'CE2': [2.291, 3.747, -0.578], 'HD1': [0.381, 5.749, -2.277], 'H2': [-0.081, 7.223, 0.209], 'H1': [-0.21, 8.914, 0.173], 'OC': [3.683, 9.898, 0.152], 'NE1': [1.193, 3.885, -1.413], 'HB3': [3.49, 7.662, -1.151], 'HB2': [1.969, 7.898, -1.982]}, 'VAL': {'C': [1.935, 1.434, 0.0], 'HA': [1.952, -0.468, 0.928], 'HG11': [2.529, -2.782, -0.384], 'H2': [-0.377, -1.152, 0.0], 'CB': [2.166, -0.772, -1.248], 'CA': [1.547, -0.026, 0.0], 'H1': [-0.571, 0.669, 0.0], 'OC': [3.338, 1.708, 0.0], 'HG21': [4.307, -0.876, -0.647], 'O': [1.09, 2.337, 0.0], 'N': [0.095, -0.181, 0.0], 'HB': [1.638, -0.395, -2.15], 'HG12': [0.914, -2.59, -1.107], 'HG13': [2.323, -2.783, -2.155], 'CG1': [1.977, -2.308, -1.217], 'HC': [3.862, 0.821, 0.0], 'HG23': [3.928, 0.511, -1.696], 'CG2': [3.683, -0.551, -1.501], 'HG22': [4.043, -1.094, -2.396]}, 'ASN': {'OC': [3.411, 1.617, 0.0], 'C': [1.996, 1.408, 0.0], 'HA': [1.918, -0.495, 0.93], 'HD22': [3.012, -2.8, 0.034], 'HD21': [1.913, -4.078, -0.711], 'H2': [-0.435, -1.066, 0.0], 'CB': [2.105, -0.789, -1.237], 'CA': [1.539, -0.032, 0.0], 'H1': [-0.544, 0.762, 0.0], 'CG': [1.721, -2.266, -1.381], 'O': [1.199, 2.345, 0.0], 'N': [0.082, -0.118, 0.0], 'HO': [1.716, 3.236, 0.0], 'OD1': [0.838, -2.639, -2.139], 'ND2': [2.345, -3.152, -0.652], 'HB3': [3.207, -0.713, -1.265], 'HB2': [1.772, -0.282, -2.164]}, 'TYR': {'HH': [0.276, -6.389, -2.453], 'CD1': [2.567, -3.198, -0.673], 'CD2': [0.854, -2.668, -2.292], 'HC': [3.941, 0.643, 0.0], 'HA': [1.952, -0.534, 0.918], 'HE1': [2.816, -5.287, -0.234], 'HE2': [-0.219, -4.332, -3.106], 'C': [2.059, 1.383, 0.0], 'CB': [2.157, -0.753, -1.259], 'CA': [1.574, -0.047, 0.0], 'CG': [1.856, -2.248, -1.412], 'O': [1.279, 2.337, 0.0], 'N': [0.115, -0.105, 0.0], 'CZ': [1.272, -4.963, -1.686], 'CE2': [0.562, -4.022, -2.428], 'CE1': [2.273, -4.553, -0.81], 'HD2': [0.29, -1.942, -2.863], 'HD1': [3.342, -2.888, 0.014], 'OH': [0.985, -6.293, -1.815], 'H2': [-0.421, -1.042, 0.0], 'H1': [-0.493, 0.788, 0.0], 'OC': [3.478, 1.563, 0.0], 'HB3': [3.258, -0.632, -1.277], 'HB2': [1.824, -0.213, -2.17]}, 'MET': {'HG1': [2.248, -2.745, -0.302], 'HG2': [0.913, -2.536, -1.453], 'C': [1.871, 1.444, 0.0], 'HE1': [2.337, -5.103, -1.622], 'HE2': [2.833, -5.262, -3.335], 'HE3': [1.229, -4.582, -2.93], 'H2': [-0.376, -1.198, 0.0], 'CB': [2.146, -0.745, -1.225], 'CA': [1.519, -0.024, 0.0], 'H1': [-0.615, 0.619, 0.0], 'CG': [1.973, -2.278, -1.266], 'O': [1.002, 2.328, 0.0], 'N': [0.071, -0.215, 0.0], 'OC': [3.267, 1.753, 0.0], 'CE': [2.288, -4.625, -2.617], 'HB2': [1.739, -0.316, -2.163], 'HOC': [3.813, 0.88, 0.0], 'HA': [1.932, -0.457, 0.93], 'HB3': [3.231, -0.528, -1.262], 'SD': [2.996, -2.973, -2.575]}}
NAME_MAP = {'A': 'ALA', 'C': 'CYS', 'E': 'GLU', 'D': 'ASP', 'G': 'GLY', 'F': 'PHE', 'I': 'ILE', 'H': 'HIS', 'K': 'LYS', 'M': 'MET', 'L': 'LEU', 'N': 'ASN', 'Q': 'GLN', 'P': 'PRO', 'S': 'SER', 'R': 'ARG', 'T': 'THR', 'W': 'TRP', 'V': 'VAL', 'Y': 'TYR'}

def transform_geometry(atoms, transform):
	return [atoms[i] + transform[i] for i in  xrange(0, 3)]

# TODO: lookup peptide bond length from forcefield instead of hard coding
def build_topology(seq, forcefield, peptide_bond_length=1.43):
	global RESIDUE_GEOMETRY
	global NAME_MAP
	geometry = RESIDUE_GEOMETRY
	names_map = NAME_MAP
	t = Topology()
	c = t.addChain('c1')
	idx_offset = 0
	atoms = []
	positions = []
	transformStack = [[0, 0, 0]]
	stackOffsets = []
	last_carbon_idx = None
	# keey track of backbone atoms
	for i, symbol in enumerate(seq):
		residueSymbol = names_map[symbol]
		geometry_for_residue = geometry[residueSymbol]
		
		if residueSymbol == "HIS":
			residueSymbol = "HIE"
		r = t.addResidue(residueSymbol, c)
		
		if i == 0:
			residueSymbol = "N" + residueSymbol
		if i == len(seq) - 1:
			residueSymbol = "C" + residueSymbol

		for atom in forcefield._templates[residueSymbol].atoms:
			atoms.append(t.addAtom(atom.name, forcefield._atomTypes[atom.type].element, r))
			if atom.name in geometry_for_residue:
				positions.append(geometry_for_residue[atom.name])
			else:
				#print "no geometry for:"
				#print atom.name
				positions.append([0, 0, 0])
		
		for bond in forcefield._templates[residueSymbol].bonds:
			t.addBond(atoms[bond[0] + idx_offset], atoms[bond[1] + idx_offset])


		curr_nitrogen_idx = None
		curr_carbon_idx = None

		for bond in forcefield._templates[residueSymbol].externalBonds:
			a = atoms[bond + idx_offset]
			if a.element.name == "carbon":
				curr_carbon_idx = bond + idx_offset
			elif a.element.name =="nitrogen":
				curr_nitrogen_idx = bond + idx_offset

		if curr_nitrogen_idx:
			loc_to = positions[curr_nitrogen_idx]
		else:
			loc_to = None

		if last_carbon_idx:
			loc_from = positions[last_carbon_idx]
		else:
			loc_from = [0, 0, 0]

		if loc_to != None and loc_from != None:
			curr_t = [loc_from[i] - loc_to[i] for i in  xrange(0, 3)]
			curr_t[0] -= peptide_bond_length
			transformStack.append(curr_t)

		# add bond for backchain
		if last_carbon_idx != None and curr_nitrogen_idx !=None:
			t.addBond(atoms[last_carbon_idx], atoms[curr_nitrogen_idx])
		
		if curr_carbon_idx:
			last_carbon_idx = curr_carbon_idx
		idx_offset += len(forcefield._templates[residueSymbol].atoms)
		stackOffsets.append(len(forcefield._templates[residueSymbol].atoms))
	
	transformed_positions = []
	idx = 0
	currStackIdx = 0
	transformStack.append([0, 0, 0]) # No transform for end of chain!
	curr_t = transformStack[0]
	for offset in stackOffsets:
		for i in xrange(0, offset):
			transformed_positions.append(transform_geometry(positions[idx], curr_t))
			idx += 1
		currStackIdx += 1
		curr_t = [curr_t[i] + transformStack[currStackIdx][i] for i in  xrange(0, 3)]
	return t, transformed_positions


